Index: udisks2/data/udisks2.service.in
===================================================================
--- udisks2.orig/data/udisks2.service.in	2024-12-19 09:47:58.932385402 +0800
+++ udisks2/data/udisks2.service.in	2025-03-12 15:50:37.000000000 +0800
@@ -5,7 +5,7 @@
 [Service]
 Type=dbus
 BusName=org.freedesktop.UDisks2
-ExecStart=@udisksdprivdir@/udisksd
+ExecStart=@udisksdprivdir@/udisksd -d
 KillSignal=SIGINT
 
 [Install]
Index: udisks2/src/main.c
===================================================================
--- udisks2.orig/src/main.c	2024-12-19 09:47:58.972386938 +0800
+++ udisks2/src/main.c	2025-03-12 15:50:37.000000000 +0800
@@ -24,6 +24,8 @@
 #include <gio/gio.h>
 #include <glib-unix.h>
 
+#include <libmount/libmount.h>
+
 #include <blockdev/blockdev.h>
 
 #include "udiskslogging.h"
@@ -142,6 +144,7 @@
       /* tell GLib logging to not throw away DEBUG and INFO messages (for our
          "udisks" domain) unless already specified somehow by the user */
       g_setenv("G_MESSAGES_DEBUG", "udisks", FALSE);
+      mnt_init_debug(0xFFFF);
     }
 
   if (g_getenv ("PATH") == NULL)
Index: udisks2/src/udisksdaemonutil.c
===================================================================
--- udisks2.orig/src/udisksdaemonutil.c	2025-03-12 15:50:37.000000000 +0800
+++ udisks2/src/udisksdaemonutil.c	2025-03-12 15:50:37.000000000 +0800
@@ -743,6 +743,7 @@
                                                                invocation,
                                                                &error))
     {
+      udisks_warning ("%s", error!=NULL ? error->message : "check authorization sync error");
       g_dbus_method_invocation_take_error (invocation, error);
       return FALSE;
     }
Index: udisks2/src/udiskslinuxfilesystem.c
===================================================================
--- udisks2.orig/src/udiskslinuxfilesystem.c	2025-03-12 15:50:37.000000000 +0800
+++ udisks2/src/udiskslinuxfilesystem.c	2025-03-12 16:07:19.996186300 +0800
@@ -966,6 +966,7 @@
     {
       if (g_mkdir_with_parents (mount_point_to_use, 0755) != 0)
         {
+          udisks_warning("Error creating directory `%s' to be used for mounting %s: %m",mount_point_to_use,device);
           g_dbus_method_invocation_return_error (invocation,
                                                  UDISKS_ERROR,
                                                  UDISKS_ERROR_FAILED,
@@ -1042,6 +1043,7 @@
                                                  "Error mounting system-managed device %s: %s",
                                                  device,
                                                  error->message);
+          udisks_warning("Error mounting system-managed device %s: %s",device,error->message);
           g_clear_error (&error);
           return FALSE;
         }
@@ -1112,6 +1114,7 @@
                                              "Cannot mount block device %s with probed usage `%s' - expected `filesystem'",
                                              device,
                                              probed_fs_usage);
+      udisks_warning("Cannot mount block device %s with probed usage `%s' - expected `filesystem'",device,probed_fs_usage);
       return FALSE;
     }
 
@@ -1154,6 +1157,7 @@
   /* Calculate filesystem type (guaranteed to be valid UTF-8) */
   if (!calculate_fs_type (block, options, &fs_signature, &fs_type_to_use, &error))
     {
+      udisks_warning ("%s", error!=NULL ? error->message : "calculate fs type error");
       g_dbus_method_invocation_take_error (invocation, error);
       return FALSE;
     }
@@ -1169,6 +1173,7 @@
                                                &error);
   if (*mount_point_to_use == NULL)
     {
+      udisks_warning ("%s", error!=NULL ? error->message : "calculate mount point error");
       g_dbus_method_invocation_take_error (invocation, error);
       g_free (fs_signature);
       g_free (fs_type_to_use);
@@ -1187,6 +1192,7 @@
   g_free (fs_type_to_use);
   if (mount_options == NULL)
     {
+      udisks_warning ("%s", error!=NULL ? error->message : "calculate mount options error");
       g_dbus_method_invocation_take_error (invocation, error);
       return FALSE;
     }
@@ -1199,6 +1205,7 @@
                                              UDISKS_ERROR_FAILED,
                                              "Error creating mount point `%s': %m",
                                              *mount_point_to_use);
+      udisks_warning ("Error creating mount point `%s': %m", *mount_point_to_use);
       free_mount_options (mount_options);
       return FALSE;
     }
@@ -1241,6 +1248,7 @@
                                                  device,
                                                  *mount_point_to_use,
                                                  error->message);
+          udisks_warning ("Error mounting %s at %s: %s", device,*mount_point_to_use,error->message);
           udisks_simple_job_complete (UDISKS_SIMPLE_JOB (job), FALSE, error->message);
           g_clear_error (&error);
           break;
@@ -1280,9 +1288,15 @@
   /* Only allow a single call at a time */
   g_mutex_lock (&UDISKS_LINUX_FILESYSTEM (filesystem)->lock);
 
+  udisks_notice("Handling mount requests for %s from sender %s with method %s",
+    g_dbus_method_invocation_get_object_path(invocation),
+    g_dbus_method_invocation_get_sender(invocation),
+    g_dbus_method_invocation_get_method_name(invocation));
+
   object = udisks_daemon_util_dup_object (filesystem, &error);
   if (object == NULL)
     {
+      udisks_warning ("%s", error!=NULL ? error->message : "dup object error");
       g_dbus_method_invocation_take_error (invocation, error);
       goto out;
     }
@@ -1326,6 +1340,7 @@
                                              "Device %s is already mounted at %s.\n",
                                              device,
                                              str->str);
+      udisks_warning ("Device %s is already mounted at %s", device,str->str);
       g_string_free (str, TRUE);
       goto out;
     }
@@ -1335,6 +1350,7 @@
       if (!udisks_daemon_util_get_user_info_by_name (opt_as_user, &caller_uid, &caller_gid, &error))
         {
           g_dbus_method_invocation_return_gerror (invocation, error);
+          udisks_warning ("%s by %s", error!=NULL ? error->message : "get user info error",opt_as_user);
           g_clear_error (&error);
           goto out;
         }
@@ -1349,6 +1365,7 @@
                                                    &error))
         {
           g_dbus_method_invocation_return_gerror (invocation, error);
+          udisks_warning ("%s", error!=NULL ? error->message : "get caller uid error");
           g_clear_error (&error);
           goto out;
         }
@@ -1356,6 +1373,7 @@
       if (!udisks_daemon_util_get_user_info (caller_uid, &caller_gid, &caller_user_name, &error))
         {
           g_dbus_method_invocation_return_gerror (invocation, error);
+          udisks_warning ("%s by %u", error!=NULL ? error->message : "get caller uid error",caller_uid);
           g_clear_error (&error);
           goto out;
         }
