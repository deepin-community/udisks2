Index: udisks2/src/udisksdaemonutil.c
===================================================================
--- udisks2.orig/src/udisksdaemonutil.c	2024-12-19 11:31:40.000000000 +0800
+++ udisks2/src/udisksdaemonutil.c	2024-12-19 12:05:41.451998740 +0800
@@ -1960,6 +1960,98 @@
 
 /* ---------------------------------------------------------------------------------------------------- */
 
+/**
+ * udisks_decode_udev_vfat_string:
+ * @str: An udev-encoded string or %NULL.
+ *
+ * Unescapes sequences like \x20 to " " and ensures the returned string is valid UTF-8.
+ *
+ * If the string is not valid UTF-8, try as hard as possible to convert to UTF-8.
+ *
+ * If %NULL is passed, then %NULL is returned.
+ *
+ * See udisks_decode_udev_string()
+ *
+ * Returns: A valid UTF-8 string that must be freed with g_free().
+ */
+gchar * udisks_decode_udev_vfat_string (const gchar *str, const gchar *fallback_str)
+{
+  GString *s;
+  gchar *ret;
+  const gchar *end_valid;
+  guint n;
+
+  if (str == NULL)
+    {
+      ret = NULL;
+      goto out;
+    }
+
+  s = g_string_new (NULL);
+  for (n = 0; str[n] != '\0'; n++)
+    {
+      if (str[n] == '\\')
+        {
+          gint val;
+
+          if (str[n + 1] != 'x' || str[n + 2] == '\0' || str[n + 3] == '\0')
+            {
+              udisks_warning ("**** NOTE: malformed encoded string `%s'", str);
+              break;
+            }
+
+          val = (g_ascii_xdigit_value (str[n + 2]) << 4) | g_ascii_xdigit_value (str[n + 3]);
+
+          g_string_append_c (s, val);
+
+          n += 3;
+        }
+      else
+        {
+          g_string_append_c (s, str[n]);
+        }
+    }
+
+  if (!g_utf8_validate (s->str, -1, &end_valid))
+    {
+      udisks_warning ("The string `%s' is not valid UTF-8. Invalid characters begins at `%s'", s->str, end_valid);
+      // Attempt to convert from GBK to UTF-8
+      GError *error = NULL;
+      gchar *converted = g_convert (s->str, -1, "UTF-8", "GBK", NULL, NULL, &error);
+
+      if (converted != NULL)
+        {
+          udisks_info ("Converted GBK string `%s' to UTF-8", s->str);
+          g_string_free (s, TRUE);
+          ret = converted;
+        }
+      else
+        {
+          udisks_warning ("Failed to convert string from GBK to UTF-8: %s", error->message);
+          g_error_free (error);
+
+          if (fallback_str)
+            {
+              udisks_info ("Invalid string `%s' replaced by `%s'", s->str, fallback_str);
+              ret = g_strdup (fallback_str);
+              g_string_free (s, TRUE);
+            }
+          else
+            {
+              ret = g_strndup (s->str, end_valid - s->str);
+              g_string_free (s, TRUE);
+            }
+        }
+    }
+  else
+    {
+      ret = g_string_free (s, FALSE);
+    }
+
+ out:
+  return ret;
+}
+
 extern gboolean is_pid_dde_filemanager(pid_t pid);
 
 gboolean is_pid_dde_filemanager(pid_t pid)
Index: udisks2/src/udisksdaemonutil.h
===================================================================
--- udisks2.orig/src/udisksdaemonutil.h	2024-12-19 09:47:58.980387244 +0800
+++ udisks2/src/udisksdaemonutil.h	2024-12-19 12:05:46.140186579 +0800
@@ -37,6 +37,8 @@
 
 gchar *udisks_decode_udev_string (const gchar *str,
                                   const gchar *fallback_str);
+gchar *udisks_decode_udev_vfat_string (const gchar *str,
+                                  const gchar *fallback_str);
 
 void udisks_safe_append_to_object_path (GString      *str,
                                         const gchar  *s);
Index: udisks2/src/udiskslinuxblock.c
===================================================================
--- udisks2.orig/src/udiskslinuxblock.c	2024-12-19 11:31:40.000000000 +0800
+++ udisks2/src/udiskslinuxblock.c	2024-12-19 12:05:37.887855976 +0800
@@ -1230,8 +1230,16 @@
   s = udisks_decode_udev_string (g_udev_device_get_property (device->udev_device, "ID_FS_VERSION"), NULL);
   udisks_block_set_id_version (iface, s);
   g_free (s);
-  s = udisks_decode_udev_string (g_udev_device_get_property (device->udev_device, "ID_FS_LABEL_ENC"),
+  if (g_strcmp0 (g_udev_device_get_property (device->udev_device, "ID_FS_TYPE"), "vfat") == 0)
+    {
+      s = udisks_decode_udev_vfat_string (g_udev_device_get_property (device->udev_device, "ID_FS_LABEL_ENC"),
                                  g_udev_device_get_property (device->udev_device, "ID_FS_LABEL"));
+    }
+  else
+    {
+      s = udisks_decode_udev_string (g_udev_device_get_property (device->udev_device, "ID_FS_LABEL_ENC"),
+                                 g_udev_device_get_property (device->udev_device, "ID_FS_LABEL"));
+    }
   udisks_block_set_id_label (iface, s);
   g_free (s);
   s = udisks_decode_udev_string (g_udev_device_get_property (device->udev_device, "ID_FS_UUID_ENC"),
